"""
‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö Twitch Bad Word Detector
‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏à‡∏ö‡∏°‡∏´‡∏≤‡∏•‡∏±‡∏¢

‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ:
1. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á pytest: pip install pytest pandas openpyxl
2. ‡∏£‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö: pytest test_badword_detector.py -v
3. ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô: pytest test_badword_detector.py -v --html=report.html
"""

import pytest
import time
import sys
from datetime import datetime
import pandas as pd


from main_gui import TwitchChatWorker

# ================== 1. UNIT TESTING ==================

class TestBadWordDetection:
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö"""
    
    @pytest.fixture
    def worker(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á worker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
        return TwitchChatWorker("test_channel")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    def test_detect_thai_profanity_simple(self, worker):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡πÑ‡∏ó‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤"""
        message = "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏±‡∏ô‡πÑ‡∏≠‡πâ‡∏™‡∏±‡∏™"
        result = worker.detect_thai_profanity(message)
        assert len(result) > 0, "‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡πÑ‡∏ó‡∏¢‡πÑ‡∏î‡πâ"
    
    def test_detect_thai_profanity_with_spaces(self, worker):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡∏£‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á"""
        message = "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏±‡∏ô ‡πÑ ‡∏≠‡πâ ‡∏™ ‡∏± ‡∏™‡∏™"
        result = worker.detect_thai_profanity(message)
        assert len(result) > 0, "‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡∏£‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ"
    
    def test_detect_thai_profanity_with_symbols(self, worker):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡∏£‡∏Å‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå"""
        message = "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏±‡∏ô!@#‡πÑ‡∏≠‡πâ$%‡∏™‡∏±‡∏™‡∏ß‡πå"
        result = worker.detect_thai_profanity(message)
        assert len(result) > 0, "‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡∏£‡∏Å‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÑ‡∏î‡πâ"
    
    def test_detect_thai_no_profanity(self, worker):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"""
        message = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡∏µ‡∏°‡∏≤‡∏Å"
        result = worker.detect_thai_profanity(message)
        assert len(result) == 0, "‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö"
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
    def test_detect_english_profanity_simple(self, worker):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤"""
        message = "you are so stupid"
        result = worker.detect_english_profanity(message)
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå badwords_en.txt
        assert isinstance(result, list), "‡∏Ñ‡∏ß‡∏£‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô list"
    
    def test_detect_english_profanity_leet_speak(self, worker):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÅ‡∏ö‡∏ö leet speak"""
        message = "stupidperson"  # ‡∏Ñ‡∏≥‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô
        result = worker.detect_english_profanity(message)
        assert isinstance(result, list), "‡∏Ñ‡∏ß‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢ wordsegment"
    
    def test_detect_english_no_profanity(self, worker):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©"""
        message = "hello everyone have a nice day"
        result = worker.detect_english_profanity(message)
        assert len(result) == 0, "‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö"
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏ú‡∏™‡∏°
    def test_detect_mixed_language(self, worker):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏™‡∏°‡πÑ‡∏ó‡∏¢-‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©"""
        message = "hello ‡πÑ‡∏≠‡πâ‡∏™‡∏±‡∏™ stupid"
        result = worker.optimized_detect_bad_words(message)
        assert len(result) > 0, "‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏†‡∏≤‡∏©‡∏≤"
    
    def test_detect_empty_message(self, worker):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á"""
        message = ""
        result = worker.optimized_detect_bad_words(message)
        assert len(result) == 0, "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏ß‡∏£‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ empty list"

# ================== 2. ACCURACY TESTING ==================

class TestAccuracy:
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"""
    
    @pytest.fixture
    def worker(self):
        return TwitchChatWorker("test_channel")
    
    @pytest.fixture
    def test_dataset(self):
        """‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)"""
        return [
            # (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°, ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà True/False)
            ("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö", False),
            ("‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡∏µ‡∏°‡∏≤‡∏Å", False),
            ("hello everyone", False),
            ("nice stream", False),
            ("‡πÑ‡∏≠‡πâ‡∏™‡∏±‡∏™‡∏ß‡πå", True),  # ‡πÅ‡∏Å‡πâ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏à‡∏£‡∏¥‡∏á
            ("you stupid", True),  # ‡πÅ‡∏Å‡πâ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏à‡∏£‡∏¥‡∏á
            ("‡∏Ñ‡∏∏‡∏ì ‡πÑ ‡∏≠‡πâ ‡∏™ ‡∏± ‡∏™‡∏ß‡πå", True),  # ‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡πÅ‡∏ó‡∏£‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
            ("stu pid", True),  # ‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡πÅ‡∏ó‡∏£‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
        ]
    
    def test_calculate_accuracy(self, worker, test_dataset):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Accuracy, Precision, Recall, F1-Score"""
        true_positive = 0
        false_positive = 0
        true_negative = 0
        false_negative = 0
        
        for message, has_badword in test_dataset:
            result = worker.optimized_detect_bad_words(message)
            detected = len(result) > 0
            
            if has_badword and detected:
                true_positive += 1
            elif has_badword and not detected:
                false_negative += 1
            elif not has_badword and detected:
                false_positive += 1
            elif not has_badword and not detected:
                true_negative += 1
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ
        total = len(test_dataset)
        accuracy = (true_positive + true_negative) / total * 100
        
        precision = true_positive / (true_positive + false_positive) if (true_positive + false_positive) > 0 else 0
        recall = true_positive / (true_positive + false_negative) if (true_positive + false_negative) > 0 else 0
        f1_score = 2 * (precision * recall) / (precision + recall) if (precision + recall) > 0 else 0
        
        # ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        print("\n" + "="*50)
        print("üìä ACCURACY TEST RESULTS")
        print("="*50)
        print(f"Total Test Cases: {total}")
        print(f"True Positive (TP): {true_positive}")
        print(f"False Positive (FP): {false_positive}")
        print(f"True Negative (TN): {true_negative}")
        print(f"False Negative (FN): {false_negative}")
        print("-"*50)
        print(f"Accuracy:  {accuracy:.2f}%")
        print(f"Precision: {precision:.2f}")
        print(f"Recall:    {recall:.2f}")
        print(f"F1-Score:  {f1_score:.2f}")
        print("="*50)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
        results_df = pd.DataFrame({
            'Metric': ['Accuracy', 'Precision', 'Recall', 'F1-Score', 'TP', 'FP', 'TN', 'FN'],
            'Value': [f"{accuracy:.2f}%", f"{precision:.2f}", f"{recall:.2f}", f"{f1_score:.2f}",
                     true_positive, false_positive, true_negative, false_negative]
        })
        results_df.to_csv('accuracy_results.csv', index=False, encoding='utf-8-sig')
        print("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà accuracy_results.csv")
        
        # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ accuracy ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 70% ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏ú‡πà‡∏≤‡∏ô
        assert accuracy >= 70, f"Accuracy ‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ: {accuracy:.2f}%"

# ================== 3. PERFORMANCE TESTING ==================

class TestPerformance:
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"""
    
    @pytest.fixture
    def worker(self):
        return TwitchChatWorker("test_channel")
    
    def test_detection_speed(self, worker):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö"""
        test_messages = [
            "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö",
            "hello everyone",
            "‡πÑ‡∏≠‡πâ‡∏™‡∏±‡∏™‡∏ß‡πå",  # ‡πÅ‡∏Å‡πâ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏à‡∏£‡∏¥‡∏á
            "you stupid",
            "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡∏µ‡∏°‡∏≤‡∏Å hello nice stream"
        ] * 100  # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 500 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        
        start_time = time.time()
        
        for message in test_messages:
            worker.optimized_detect_bad_words(message)
        
        end_time = time.time()
        total_time = end_time - start_time
        avg_time = (total_time / len(test_messages)) * 1000  # ‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        
        print("\n" + "="*50)
        print("‚ö° PERFORMANCE TEST RESULTS")
        print("="*50)
        print(f"Total Messages: {len(test_messages)}")
        print(f"Total Time: {total_time:.3f} seconds")
        print(f"Average Time: {avg_time:.3f} ms/message")
        print(f"Messages/Second: {len(test_messages)/total_time:.2f}")
        print("="*50)
        
        # ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤ 100ms ‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        assert avg_time < 100, f"‡∏ä‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ: {avg_time:.3f} ms"
    
    def test_memory_usage(self, worker):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥"""
        import sys
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ deque
        for i in range(200):  # maxlen=200
            chat_info = {
                'timestamp': datetime.now(),
                'username': f'user{i}',
                'message': f'test message {i}',
                'bad_words': ['test'],
                'channel': 'test'
            }
            worker.chat_messages.append(chat_info)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
        memory_size = sys.getsizeof(worker.chat_messages)
        
        for msg in worker.chat_messages:
            memory_size += sys.getsizeof(msg)
        
        memory_kb = memory_size / 1024
        
        print("\n" + "="*50)
        print("üíæ MEMORY USAGE TEST")
        print("="*50)
        print(f"Messages Stored: {len(worker.chat_messages)}")
        print(f"Memory Usage: {memory_kb:.2f} KB")
        print(f"Memory per Message: {memory_kb/len(worker.chat_messages):.3f} KB")
        print("="*50)
        
        # ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100 KB ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 200 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        assert memory_kb < 100, f"‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ: {memory_kb:.2f} KB"

# ================== 4. EDGE CASE TESTING ==================

class TestEdgeCases:
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏û‡∏¥‡πÄ‡∏®‡∏©"""
    
    @pytest.fixture
    def worker(self):
        return TwitchChatWorker("test_channel")
    
    def test_very_long_message(self, worker):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏°‡∏≤‡∏Å"""
        message = "hello " * 1000 + "‡πÑ‡∏≠‡πâ‡∏™‡∏±‡∏ï‡∏ß‡πå"  # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß 5000+ ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
        result = worker.optimized_detect_bad_words(message)
        assert isinstance(result, list), "‡∏Ñ‡∏ß‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÑ‡∏î‡πâ"
    
    def test_special_characters(self, worker):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©"""
        message = "!@#$%^&*()_+-=[]{}|;:',.<>?/~`"
        result = worker.optimized_detect_bad_words(message)
        assert len(result) == 0, "‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡πÉ‡∏´‡πâ error"
    
    def test_unicode_characters(self, worker):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ Unicode"""
        message = "üòÄüòÅüòÇü§£üòÉ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ üëã"
        result = worker.optimized_detect_bad_words(message)
        assert isinstance(result, list), "‡∏Ñ‡∏ß‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ emoji ‡πÑ‡∏î‡πâ"
    
    def test_repeated_detection(self, worker):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ã‡πâ‡∏≥‡πÜ"""
        message = "‡πÑ‡∏≠‡πâ‡∏™‡∏±‡∏™‡∏ß‡πå ‡πÑ‡∏≠‡πâ‡∏™‡∏±‡∏™‡∏ß‡πå ‡πÑ‡∏≠‡πâ‡∏™‡∏±‡∏™‡∏ß‡πå"  # ‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏ã‡πâ‡∏≥ 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        result = worker.optimized_detect_bad_words(message)
        # ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥ (‡πÉ‡∏ä‡πâ set)
        assert len(result) >= 1, "‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡πÑ‡∏î‡πâ"

# ================== 5. INTEGRATION TESTING ==================

class TestIntegration:
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô (‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á)"""
    
    def test_load_badwords_files(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö"""
        worker = TwitchChatWorker("test_channel")
        assert len(worker.badwords_th) > 0 or len(worker.badwords_en) > 0, \
            "‡∏Ñ‡∏ß‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡πÑ‡∏ü‡∏•‡πå"
    
    def test_chat_message_storage(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ä‡∏ó"""
        worker = TwitchChatWorker("test_channel")
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        for i in range(10):
            chat_info = {
                'timestamp': datetime.now(),
                'username': f'user{i}',
                'message': f'message {i}',
                'bad_words': [],
                'channel': 'test'
            }
            worker.chat_messages.append(chat_info)
        
        messages = worker.get_chat_messages()
        assert len(messages) == 10, "‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏ö"
    
    def test_clear_messages(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
        worker = TwitchChatWorker("test_channel")
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        worker.chat_messages.append({'test': 'data'})
        assert len(worker.chat_messages) > 0
        
        # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        worker.clear_memory_messages()
        assert len(worker.chat_messages) == 0, "‡∏Ñ‡∏ß‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ"

# ================== ‡∏£‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ==================

if __name__ == "__main__":
    print("\n" + "="*70)
    print("üß™ TWITCH BAD WORD DETECTOR - COMPREHENSIVE TESTING")
    print("="*70)
    
    # ‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ pytest
    pytest.main([
        __file__,
        "-v",  # verbose
        "-s",  # ‡πÅ‡∏™‡∏î‡∏á print
        "--tb=short",  # ‡πÅ‡∏™‡∏î‡∏á error ‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô
        "--html=test_report.html",  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô HTML (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á pytest-html)
        "--self-contained-html"  # ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô HTML ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    ])